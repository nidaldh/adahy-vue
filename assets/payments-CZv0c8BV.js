import{K as S,r as u,u as D,M as A,s as l,q as o}from"./index-D2cXNYYD.js";const q=S("payments",()=>{const n=u([]),d=u(!1),a=u(null),i=u(0),s=D(),{data:c,loading:y,error:h,subscribe:m,addData:v,updateData:p,removeData:f}=A("payments");l(c,e=>{n.value=e?Array.isArray(e)?e:[e]:[]},{deep:!0,immediate:!0}),l(y,e=>{d.value=e},{immediate:!0}),l(h,e=>{a.value=e?e.message:null},{immediate:!0}),l(()=>s.userId,e=>{e?m():(n.value=[],a.value=null)},{immediate:!0});const g=e=>n.value.filter(t=>t.customerId===e),w=async e=>{if(!s.userId)throw a.value="User not authenticated. Cannot add payment log entry.",new Error("User not authenticated for adding payment log entry");try{return await v(e)}catch(t){throw a.value=`Failed to log payment: ${t.message}`,t}},I=async(e,t)=>{if(!s.userId)throw a.value="User not authenticated. Cannot update payment log entry.",new Error("User not authenticated for updating payment log entry");try{await p(e,t)}catch(r){throw a.value=`Failed to update payment log: ${r.message}`,r}},P=async e=>{if(!s.userId)throw a.value="User not authenticated. Cannot delete payment log entry.",new Error("User not authenticated for deleting payment log entry");try{await f(e)}catch(t){throw a.value=`Failed to delete payment log: ${t.message}`,t}},b=o(()=>e=>n.value.filter(t=>t.customerId===e).reduce((t,r)=>t+(r.currency==="NIS"?r.amount:r.nisEquivalent||0),0)),U=o(()=>n.value),F=async()=>{if(!s.userId){a.value="User not authenticated. Cannot fetch payments.";return}try{m(),i.value=Date.now()}catch(e){a.value=`Failed to fetch payments: ${e.message}`}},E=e=>{a.value=e},C=()=>{a.value=null};return{payments:U,loading:o(()=>d.value),error:o(()=>a.value),lastFetchTimestamp:o(()=>i.value),getPaymentsByCustomerId:g,addPayment:w,updatePayment:I,deletePayment:P,totalPaidForCustomerNIS:b,fetchPayments:F,setError:E,clearError:C}});export{q as u};
